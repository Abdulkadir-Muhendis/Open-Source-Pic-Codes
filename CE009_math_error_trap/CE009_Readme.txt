
                              Readme File for Code Example:
                        CE009 - Math Error Traps for Robust Operation
                        ----------------------------------------------

This file contains the following sections:
1. Code Example Description
2. Folder Contents
3. Suggested Development Resources
4. Reconfiguring the project for a different dsPIC30F device
5. Revision History


1. Code Example Description:
----------------------------
Microchip's 16-bit dsPIC® Digital Signal Controllers feature an on-chip mechanism to detect software errors and take corrective action. Specifically, the ability to detect arithmetic (math) errors is provided by means of automatic Math Error Trap detection. Math errors may be caused by one of the following:
a. Divide by Zero
b. Accumulator A overflow (bit 31 destroyed)
c. Accumulator B Overflow (bit 31 destroyed)
d. Catastrophic overflow of Accumulator A (bit 39 destroyed)
e. Catastrophic overflow of Accumulator B (bit 39 destroyed)
Accumulator Error traps need to be enabled in software by the user, while divide by zero errors are automatically enabled in hardware.

If the application defines an Math Error Trap service routine (trap handler), the processor will vector to the trap handler when it detects a math error.

The attached code example is valid for dsPIC30F devices in the GP, Sensor and Motor-Control families.

The attached code example contains one C file and one Assembler file - "main.c" and "math_error_trap_30F_GP_MC_Sensor.s" .
- The code example in the "math_error_trap_30F_GP_MC_Sensor.s" file demonstrates a simple means by which the user may detect what kind of math error was caused -whether "Divide-by-Zero" or an "Accumulator Overflow" trap.  You may add this file to your project to ease debugging during development of your application.
NOTE: This routine also estimates the instruction that caused the math error trap to occur by examining the PC value that is stored in the stack prior to entering the Math Error Trap. Since the instruction that causes divide by zero error to occur is not executed, the stacked PC points to the offending instruction. However, the instructions that cause accumulator overflows to occur will be executed prior to the trap being caused. So the stacked PC will point to the instruction after the offending instruction. Thus, the estimation routines differ slightly for the Divide by Zero error and the Accumulator Overflow errors. It should also be noted that since this trap routine is written in C the estimation of the stacked PC will depend on the compiler optimization level set up for this file. In the trap routine presented here, a comiler optimization level of 0 is assumed for this file.

- The code in the "main.c" file simply performs an illegal math operations so as to cause a Math Error Trap. If the symbol DIVIDEBYZERO is not defined, the code in the main.c file will cuse an Accumulator A overflow error trap to occur. To remove the DIVIDEBYZERO symbol simply comment out the line of code as follows:
        //#define DIVIDEBYZERO

Note:
The user should note that the MPLAB® C30 C compiler will not intentionally generate any instructions that cause an arithmetic error trap to occur.

2. Folder Contents:
-------------------
This folder contains the following sub-folders:
a. gld
        This folder contains a linker script file for the example project.
        This file is used for building the project for a 30F6014A device.
        This file simply includes the relevant device linker script, 
        "p30F6014A.gld" and the relevant MPLAB® C30 library files, 
        "libdsp-coff.a", "libc-coff.a", and "libm-coff.a" or 
        "libdsp-elf.a", "libc-elf.a", and "libm-elf.a" from their installed 
        location. 

b. h
        This folder contains C header files useful in building this
        project. Device register and bit definitions are provided in
        the "p30F6014A.h" file, which may be found in the installation folder
        of the MPLAB® C30 toolsuite.

c. hex
        This folder contains three file types - coff, hex and map.
        These are files generated by the MPLAB® C30 toolsuite on build
        operation performed within MPLAB® IDE. The *.map file contains
        details on memory allocation for various variables, constants
        and dsPIC30F instructions specified in the source and library
        code. The *.hex file contains a binary file that may be
        programmed into the dsPIC30F device. The *.coff file contains
        a binary file that is used by MPLAB® IDE for simulation.

d. src
        This folder contains all the C and Assembler source files (*.c,
        *.s) used in demonstrating the described example. This folder
        also contains a sub-folder named "obj" that stores compiled
        object files generated when the project is built.

3. Suggested Development Resources:
-----------------------------------
        a. dsPICDEM™ 1.1 Development Board (See below)
        b. dsPIC30F6014A Digital Signal Controller Plug-In Module (See below)

4. Reconfiguring the project for a different dsPIC30F device:
-------------------------------------------------------------
The Project/Workspace can be easily reconfigured for any dsPIC30F device.
Please use the following general guidelines:
        a. Change device selection within MPLAB® IDE to a dsPIC30F device of
        your choice by using the following menu option:
        MPLAB IDE>>Configure>>Select Device

        b. Provide the correct device linker script and header file for your
        device. Device linker scripts and header files are available in your
        MPLAB® C30 installation folder under:
        Device Linker Script-
                YourDrive:>Program Files\Microchip\MPLAB C30\support\gld
        Device C Header file-
                YourDrive:>Program Files\Microchip\MPLAB C30\support\h
        Device ASM Include file-
                YourDrive:>Program Files\Microchip\MPLAB C30\support\inc

        c. Provide the appropriate path to your MPLAB C30 support file locations
        using the menu option:
        MPLAB IDE>>Project>>Build Options>>Project

        d. Chose the development board applicable to your device. Some options
        are provided below:
        - dsPICDEM™ 2 Development Board supports:
          30F2010, 30F2011, 30F2012, 30F3010, 30F3011, 30F3012, 30F3013,
          30F3014, 30F4011, 30F4012, 30F4013

        - dsPICDEM™ 1.1 Development Board supports:
          30F5013, 30F6010, 30F6011, 30F6012, 30F6013, 30F6014,
          30F6011A, 30F6012A, 30F6013A, 30F6014A

        - dsPICDEM™ MC1 Development Board supports:
          30F6010, 30F6010A, 30F5016

        e. Re-build the MPLAB® project using the menu option:
        MPLAB IDE>>Project>>Build All

        f. Download the hex file into the device and run.

5. Revision History :
---------------------
        09/30/2005 - Initial Release of the Code Example
